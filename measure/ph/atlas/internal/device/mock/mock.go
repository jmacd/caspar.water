// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jmacd/caspar.water/measure/ph/atlas/internal/device (interfaces: I2CStringer)
//
// Generated by this command:
//
//	mockgen -package mock . I2CStringer
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockI2CStringer is a mock of I2CStringer interface.
type MockI2CStringer struct {
	ctrl     *gomock.Controller
	recorder *MockI2CStringerMockRecorder
}

// MockI2CStringerMockRecorder is the mock recorder for MockI2CStringer.
type MockI2CStringerMockRecorder struct {
	mock *MockI2CStringer
}

// NewMockI2CStringer creates a new mock instance.
func NewMockI2CStringer(ctrl *gomock.Controller) *MockI2CStringer {
	mock := &MockI2CStringer{ctrl: ctrl}
	mock.recorder = &MockI2CStringerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI2CStringer) EXPECT() *MockI2CStringerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockI2CStringer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockI2CStringerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockI2CStringer)(nil).Close))
}

// WriteSleepRead mocks base method.
func (m *MockI2CStringer) WriteSleepRead(arg0 string, arg1 time.Duration) (byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSleepRead", arg0, arg1)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteSleepRead indicates an expected call of WriteSleepRead.
func (mr *MockI2CStringerMockRecorder) WriteSleepRead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSleepRead", reflect.TypeOf((*MockI2CStringer)(nil).WriteSleepRead), arg0, arg1)
}
