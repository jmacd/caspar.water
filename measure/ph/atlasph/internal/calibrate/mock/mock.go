// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jmacd/caspar.water/measure/ph/atlasph/internal/calibrate (interfaces: Interactive)
//
// Generated by this command:
//
//	mockgen -package mock . Interactive
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInteractive is a mock of Interactive interface.
type MockInteractive struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveMockRecorder
}

// MockInteractiveMockRecorder is the mock recorder for MockInteractive.
type MockInteractiveMockRecorder struct {
	mock *MockInteractive
}

// NewMockInteractive creates a new mock instance.
func NewMockInteractive(ctrl *gomock.Controller) *MockInteractive {
	mock := &MockInteractive{ctrl: ctrl}
	mock.recorder = &MockInteractiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractive) EXPECT() *MockInteractiveMockRecorder {
	return m.recorder
}

// ReadLine mocks base method.
func (m *MockInteractive) ReadLine() ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadLine indicates an expected call of ReadLine.
func (mr *MockInteractiveMockRecorder) ReadLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockInteractive)(nil).ReadLine))
}

// ReadRune mocks base method.
func (m *MockInteractive) ReadRune() (int32, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRune")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadRune indicates an expected call of ReadRune.
func (mr *MockInteractiveMockRecorder) ReadRune() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRune", reflect.TypeOf((*MockInteractive)(nil).ReadRune))
}
